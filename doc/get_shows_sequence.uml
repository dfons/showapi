@startuml

actor user
boundary ShowController as C
control ShowService as S
entity Cache as cache
database Database as DB
boundary TheaterController as T
boundary BookingController as B

note left of user: Get all shows
user -> C : GET /api/shows
user <- C : 200: {}
note left of user #green: Get a show by ID
user -> C : GET /api/shows/1
alt Show exists
user <- C : 200: {}
else Show does not exist
user <- C : 404: {}
end

note left of user: Get all theaters
user -> C : GET /api/theaters
user <- C : 200: {}
note left of user #green: Get a theater by ID
user -> C : GET /api/theaters/1
alt Theater exists
user <- C : 200: {}
else Theater does not exist
user <- C : 404: {}
end

note left of user: Get all sections
user -> C : GET /api/sections
user <- C : 200: {}
note left of user #green: Get a section by ID
user -> C : GET /api/sections/1
alt Section exists
user <- C : 200: {}
else Section does not exist
user <- C : 404: {}
end

note left of user: Get all tickets
user -> C : GET /api/bookings
user <- C : 200: {}
note left of user #green: Get a ticket by ID
user -> C : GET /api/bookings/1
alt Ticket exists
user <- C : 200: {}
else Ticket does not exist
user <- C : 404: {}
end

newpage

note left of user: Get show with ID 1
user -> C : GET /api/shows/1
    C -> S : getShowById()
        S -> cache : getShowById()
        alt Show is cached
        S <-- cache : Show
        else Show is outdated
        cache -> DB : loadShow()
        cache <-- DB : Show
        S <-- cache : Show
        end
    C <-- S : Show
user <-- C : 200: {response}

note left of user: Once the show is obtained\nwith its plays, the sections\nmust be queried
loop For each section
    user -> T : GET /api/sections/{sectionId}
    user <-- T : 200: {response}
end

note left of user: Now the show can be\nbooked.
user -> B : POST /api/bookings {request}
alt Show booked
user <-- B : 201: {response}
else Booking rejected
user <-- B : 406: {}
end

@enduml
